"use client"
import { Location, PostFull, UserFull } from '@/types/types';
import { formatBirthDate } from '@/utils/formattedBrithDay';
import { writeLocation } from '@/utils/writeLocation';
import React, { useEffect, useState } from 'react'
import { MdOutlineAlternateEmail } from "react-icons/md";
import { FaPhone } from "react-icons/fa";
import { FaLocationDot } from "react-icons/fa6";
import { TbGenderBigender } from "react-icons/tb";
import { FaBirthdayCake } from "react-icons/fa";
import usePostsCall from '@/service/usePostsCall';
import { VscSettings } from "react-icons/vsc";
import { Button, getOffsetTop } from '@mui/material';
import PostCard from '../../homepage/PostCard';
import { CardSkeleton, NoDataMsg } from '../../homepage/DataFetchMsg';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import useUsersCall from '@/service/useUsersCall';
import { shuffleList } from '@/utils/shuffleList';
import StickyBox from 'react-sticky-box';

interface NewUser {
 img: string;
 id: string;
 title: string;
 firstName: string;
 lastName: string;
 picture: string;
 gender: string;
 email: string;
 dateOfBirth: string; // Assuming ISO date format
 registerDate: string; // Assuming autogenerated
 updatedDate: string;
 phone: string;
 location: Location;
}

interface Props {
 nuser: NewUser
}
const UserDetailPosts = ({ nuser }: Props) => {
 const [posts, setPosts] = useState<PostFull[] | null>(null)
 const [friends, setFriends] = useState<UserFull[] | null>(null)
 const [postLoading, setPostLoading] = useState<boolean>(false)
 const { getPostByUserId } = usePostsCall();
 const { getFriendsUserPage } = useUsersCall();
 const router = useRouter();

 const getFriends = async () => {
  const friends = await getFriendsUserPage();
  setFriends(friends);
  console.log(friends);

 }

 const fetchPosts = async () => {
  setPostLoading(true)
  const posts = await getPostByUserId(nuser.id);
  if (posts && posts.data && posts.data.data) {
   setPosts(posts.data.data);
   setPostLoading(false)
  }
 };
 useEffect(() => {

  getFriends()
  fetchPosts();
 }
  , [])

 const handleSeePhotos = () => {
  router.push(`/users/${nuser.id}/photos`);

 }
 return (
  <div className="justify-center flex flex-col items-center">
   <div className="flex flex-col lg:flex-row w-full max-w-[1250px] items-stretch shrink-0 ">
    {/* left-side */}
    {/* <StickyBox offsetTop={120} offsetBottom={120} className=''> */}
    <div className='basis-[360px]  grow-[18] flex flex-col gap-4 shrink-1 m-2 user-det-left'>
     <div className='user-intro bg-white rounded-lg p-4 shadow'>
      <div className='text-textBlack text-xl font-bold'>Intro</div>
      <div className="text-[15px] text-linkColor flex flex-col gap-4 mt-4">
       {nuser.email &&
        <div className="email flex items-center gap-2"><MdOutlineAlternateEmail className="text-xl" /> {nuser.email}</div>
       }
       {nuser.phone &&
        <div className="phone flex items-center gap-2"><FaPhone className="text-xl" /> {nuser.phone}</div>
       }
       {nuser.location &&
        <div className="location flex items-center gap-2"><FaLocationDot className="text-xl" /> {writeLocation(nuser.location)}
        </div>
       }
       {nuser.gender &&
        <div className="gender flex items-center gap-2"><TbGenderBigender className="text-xl" /> {nuser.gender}</div>
       }
       {nuser.dateOfBirth &&
        <div className="birthday flex items-center gap-2"><FaBirthdayCake className="text-xl" /> {formatBirthDate(nuser.dateOfBirth)}</div>
       }

      </div>
     </div>
     <div className='user-photos  bg-white rounded-lg p-4 shadow'>
      <div className="flex justify-between">

       <div className='text-textBlack text-xl font-bold'>Photos</div>
       <button onClick={handleSeePhotos} className='text-main text-[17px]'>See All Photos</button>
      </div>
      <div className='user-post-photos grid grid-cols-3 gap-1'>
       {posts && shuffleList(posts).slice(0, 9).map((post) => (
        <div key={post.id} className='relative '>
         <Image src={post.image} alt={post.text} width={200} height={200} className='object-cover w-full h-[100px] rounded' />
        </div>
       ))}
      </div>
     </div>
     <div className='user-friends bg-white rounded-lg p-4 shadow'>
      <div className="flex justify-between">

       <div className='text-textBlack text-xl font-bold'>Friends</div>
       <button className='text-main text-[17px]'>See All Friends</button>
      </div>
      <div className='text-linkColor mt-4 hover:underline cursor-pointer '>299 friends</div>
      <div className='user-friends-photos grid grid-cols-3 gap-1'>
       {friends && shuffleList(friends).slice(0, 9).map((friend) => (
        <div key={friend.id} className='relative '>
         <Image src={friend.picture} alt={friend.firstName} width={200} height={200} className='object-cover w-full h-[100px] rounded' />
         <div className='text-[13px] text-textBlack font-medium'>
          {friend.firstName} {friend.lastName}
         </div>
        </div>
       ))}
      </div>
     </div>
    </div>
    {/* </StickyBox> */}
    {/* left-side */}

    {/* right side */}
    <div className='basis-[500px] shrink-1 grow-[25] m-4 lg:m-2 flex flex-col gap-4  user-det-right'>
     <div className='bg-white rounded-lg post-create px-4 p-2 shadow items-center flex justify-between'>
      <div className="text-xl text-textBlack font-bold">Posts</div>
      <Button className='bg-btnGraybg text-[15px] font-semibold flex gap-2  hover:bg-iconBg p-2 rounded-md '><VscSettings /> Filters</Button>
     </div>

     {postLoading && (<div className="flex flex-col gap-4"><CardSkeleton /><CardSkeleton /></div>)}
     {!postLoading && !posts?.length && <NoDataMsg />}

     {
      posts && posts.map((post) => (
       <PostCard key={post.id} post={post} />
      ))
     }
    </div>
    {/* right side */}
   </div>
  </div>
 )
}

export default UserDetailPosts